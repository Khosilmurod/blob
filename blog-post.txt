## Project Overview

### **`Live Demo: https://blob-phi-olive.vercel.app/`**

**Title:** Blob Life Simulation
**Date:** September 18, 2025
**Collaboration:** Collaborated with [Michael](https://www.linkedin.com/in/michaelcanudas/) on initial simulation mechanics. Implemented individually.

**Links:**

- **GitHub:** https://github.com/Khosilmurod/blob
- **Live Demo: https://blob-phi-olive.vercel.app/**
- **Video:**

## Project Description

This is a computer simulation where colorful circles called "blobs" move around the screen and automatically form teams with each other. The blobs can cooperate to make bigger teams or fight against other teams, with team leaders getting special golden crowns. It's like watching a digital ecosystem where the blobs create their own societies and battles without any human control.

## Inspiration

This is a computer simulation where colorful circles called "blobs" move around the screen and automatically form teams with each other. The blobs can cooperate to make bigger teams or fight against other teams, with team leaders getting special golden crowns. It's like watching a digital ecosystem where the blobs create their own societies and battles without any human control.

## Technical Implementation

### Project Structure

```
├── index.html          # p5.js canvas setup and entry point
├── sketch.js           # main simulation loop and ui management
├── config.json         # configurable parameters for simulation
└── src/                # core object-oriented classes
   ├── Team.js          # team behavior and management
   └── Blob.js          # individual blob entities and interactions
```

### Object-Oriented Architecture

The simulation is built around two core classes that handle all the complex behaviors:

**Blob Class:** Each individual circle is a Blob object with properties like `leadership` (1-100), `strength` (1-100), and `personalColor`. Blobs use steering forces for movement, check for nearby interactions within their radius, and can join teams or engage in combat. The class handles both individual wandering behavior and team-following dynamics.

**Team Class:** Teams manage collections of blobs with shared properties like `aggression` (0-100), `life/health` (0-100), and automatic leader selection. When blobs join teams, the Team class harmonizes their colors and coordinates group behaviors like combat formation and rebellion splitting.

### Core Mechanics Implementation

**Interaction System:** Every frame, each blob checks for other blobs within its interaction radius. When two blobs meet, they calculate cooperation probability using `(100 - team.aggression) / 100`. Large teams (3+ members) are more likely to fight, while smaller teams tend to cooperate and merge.

**Combat Resolution:** When teams fight, they compare total strength values and the winner gains life while the loser loses life. Dead teams are automatically replaced with new individual blobs to maintain population balance.

**Leadership & Visual Indicators:** Teams automatically select leaders based on highest leadership values. Leaders get golden crown indicators with pulsing animations, and all team members follow the leader's movement patterns using formation offsets.

## Implementation Timeline

I first worked with Michael to define the object-oriented design and core mechanics, starting with leadership and strength attributes. I then developed the simulation independently over 5–8 hours, creating the Blob and Team classes and the interaction loop. In the following 2–3 hours, I added an interactive terminal and help windows, refined the canvas integration, and deployed the project on Vercel for public access.

![telegram-cloud-photo-size-2-5361840492792382845-y.jpg](attachment:c8aa1275-b8d6-4176-aded-95212a29be1c:telegram-cloud-photo-size-2-5361840492792382845-y.jpg)

## Artistic Outcomes

The simulation creates changing abstract patterns through blob behavior:

- **Teams forming** with smooth color blends
- **Leaders changing** to create shifting focal points
- **Fights and battles** that make short-lived shapes
- **Self-organization** that leads to patterns that never repeat

## Deployment

Includes Raspberry Pi setup scripts for gallery installations with automatic fullscreen mode and systemd service management.

## LLM Use

I collaborated with Michael on design and conceptualization, and used GitHub Copilot to support in the implementation.